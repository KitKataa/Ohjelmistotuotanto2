@page "/locations/edit/{Id:long}"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks

@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger
@inject HttpClient Http
@inject SharedLib.LoginState loginState;

@if (loginState.isLoggedIn) { 

    @if (location != null)
    {
        <h3 class="h1otsikot">Muokataan matkakohdetta @location.kohdenimi</h3>
        <div class="flex-t">
            <EditForm Model="@location" OnValidSubmit="@EditLocations">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    <br />
                    <label>
                        @if (@location.kuva == null)
                        {
                            <div>Ei kuvaa saatavilla</div>
                        }
                        else
                        {
                            <div style="text-align:center"><img src="tripPictures/@location.kuva" width="133" height="133" alt="1" /></div> <br />
                        }
                        Kuva
                        <InputSelect id="kuva" @bind-Value="location.kuva">
                            <option>- Valitse kuva -</option>
                            @foreach (var i in pictures)
                            {
                                <option value="@i"><img src="tripPictures/@i" />@i</option>
                            }
                        </InputSelect>
                        @*<InputText class="form-control" id="kuva" @bind-Value="location.kuva" />*@
                    </label>
                </div>
                <br/>
                <div>
                    <label>
                        Kohdenimi
                        <InputText class="form-control" id="kohdenimi" @bind-Value="location.kohdenimi" />
                    </label>
                </div>
                <br />
                <div>
                    <label>
                        Paikkakunta
                        <InputText class="form-control" id="paikkakunta" @bind-Value="location.paikkakunta" />
                    </label>
                </div>
                <br/>
                <div>
                    <label>
                        Maa
                        <InputText class="form-control" id="maa" @bind-Value="location.maa" />
                    </label>
                </div>
                        <br/>
                <div>
                    <label>
                        Kuvausteksti
                        <InputTextArea class="form-control" id="kuvausteksti" @bind-Value="location.kuvausteksti" />
                    </label>
                </div>
                <br />
                <button type="submit" class="btn btn-primary" id="EditButton" disabled="@isSubmitting">Muokkaa</button>
            </EditForm>
        </div>
    }
 
    
    @if(r == 1){@*Jos r = 1, se tarkoittaa ettei matkakohdetta muokattu, koska se sisälsi tarinan*@
        <br/>
        <div style="text-align:center"><h3>Matkakohde sisältää tarinan.<br/>Matkakohdetta ei voi muokata.</h3></div>
    }
}
else
{
    <h2>  <img src="/images/loading.gif" width="150" /></h2>
    <h2>Kirjaudu sisään muokataksesi matkakohteita</h2>
}


@code {

    bool isSubmitting;
    SharedLib.matkakohdeDTO? location;
    private int? r { get; set; } 

    [Parameter]
    public long? Id { get; set; }
    //Nämä laitettu käsin, koska dynaaminen kuvien nimien haku tiedostosta ei onnistunut -> PURKKARATKAISU
    private string[] pictures = { "Bellano.jpg", "Bellano2.jpg", "Fréhel.jpg", "Hollanti.jpg", "Hollanti2.jpg", "img.jpg", "Keukenhof.jpg", "Koli.jpg", "Kööpenhamina.jpg",
    "Lyypekki.jpg", "Mont-Saint-Michel.jpg", "MualimanNapa2.jpg", "MualimanNapa.jpg", "Oulu.jpg", "Pariisi.jpg", "Pariisi2.jpg", "Uhrikivi.jpg", "Westport.jpg" };

    protected override async Task OnInitializedAsync()
    {
        try{
            location = await Http.GetFromJsonAsync<SharedLib.matkakohdeDTO>($"api/Matkakohdes/{Id}");
            await base.OnInitializedAsync();
        }
        catch(Exception e){
            Console.WriteLine(e.Message);
        }

    }


    async Task EditLocations()
    {
        try{
            isSubmitting = true;
            var result = await Http.PutAsJsonAsync($"api/Matkakohdes/{Id}", location);

            if (result.StatusCode == System.Net.HttpStatusCode.NoContent) //editoijalle viesti, että ei voitu muokata tarinan takia
            {
                r = 1;
            }
            else
            {
                //saako tähän väliin pyöritettyä pyörää?
                NavigationManager.NavigateTo($"/locations");
            }
        }
        catch(Exception e){
            Console.WriteLine(e.Message);
        }
        
    }
}
