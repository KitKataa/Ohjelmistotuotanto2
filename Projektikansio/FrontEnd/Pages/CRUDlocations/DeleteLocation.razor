@page "/locations/delete/{Id:long}"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks

@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger
@inject HttpClient Http
@inject SharedLib.LoginState loginState;

@if(!loginState.isLoggedIn){

    <h2>  <img src="/images/loading.gif" width="150" /></h2>
    <h2>Kirjaudu sisään poistaaksesi matkakohteita</h2>
}
else{
    
    @if (location != null)
    {
        <h2 class="h1otsikot">@location.kohdenimi</h2>
        <h3 class="h1otsikot">Haluatko varmasti poistaa matkakohteen?</h3>
        <div class="flex-t">
            <EditForm Model="@location" OnValidSubmit="@DeleteLocations">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    <br />
                    <label>
                        @if (@location.kuva == null)
                        {
                            <div>Ei kuvaa saatavilla</div>
                        }
                        else
                        {
                            <div style="text-align:center"><img src="tripPictures/@location.kuva" width="133" height="133" alt="1" /></div> <br />
                        }
                        Kuva
                        <InputText class="form-control" id="kuva" disabled @bind-Value="location.kuva" />
                    </label>
                </div>
                <br />
                <div>
                    <label>
                        Kohdenimi
                        <InputText class="form-control" id="kohdenimi" disabled @bind-Value="location.kohdenimi" />
                    </label>
                </div>
                <br />
                <div>
                    <label>
                        Paikkakunta
                        <InputText class="form-control" id="paikkakunta" disabled @bind-Value="location.paikkakunta" />
                    </label>
                </div>
                <br/>
                <div>
                    <label>
                        Maa
                        <InputText class="form-control" id="maa" disabled @bind-Value="location.maa" />
                    </label>
                </div>
                <br />
                <div>
                    <label>
                        Kuvausteksti
                        <InputTextArea class="form-control" id="kuvausteksti" disabled @bind-Value="location.kuvausteksti" />
                    </label>
                </div>
                <br />
                <button type="submit" class="btn btn-danger" id="DeleteButton" disabled="@isSubmitting">Poista</button>
            </EditForm>
        </div>

        @if (r == 1)
        {@*matkakohdetta ei poisteta, koska se sisälsi tarinan*@
            <br />
            <div style="text-align:center"><h3>Matkakohde sisältää tarinan.<br />Matkakohdetta ei voi poistaa.</h3></div>
        }
    }
    else
    {
        <div style="text-align:center">Hupsista! <br />Jokin meni nyt vikaan. <br /> :( </div>
    }
}
 

@code {
    bool isSubmitting;
    SharedLib.matkakohdeDTO? location = new SharedLib.matkakohdeDTO();
    private int? r { get; set; }

    [Parameter]
    public string? User { get; set; }

    [Parameter]
    public long? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var data = await Http.GetAsync($"api/Matkakohdes/{Id}");
        location = await data.Content.ReadFromJsonAsync<SharedLib.matkakohdeDTO>();

        await base.OnInitializedAsync();
    }

    private async Task DeleteLocations()
    {
        try{
            isSubmitting = true;
            var result = await Http.DeleteAsync($"api/Matkakohdes/{Id}");

            if (result.StatusCode == System.Net.HttpStatusCode.BadRequest) //editoijalle viesti, että ei voitu poistaa tarinan takia
            {
                r = 1;
            }
            else
            {
                //saako tähän väliin pyöritettyä pyörää?
                NavigationManager.NavigateTo($"/locations");
            }
        }
        catch(Exception e){
            Console.WriteLine(e.Message);
        }

    }
}
