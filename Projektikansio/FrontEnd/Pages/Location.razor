@page "/location/{Id:long}"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks

@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger
@inject HttpClient Http
@inject SharedLib.LoginState loginState;

@*Tämän sivun tarkoituksena koostaa kaikki tiettyyn matkakohteeseen liitetyt matkat ja tarinat*@


@if (loginState.isLoggedIn) {

    @if(location != null){

        <h3>@location.kohdenimi</h3>
        @if (@location.kuva == null)
        {
            <div style="text-align:center">Ei kuvaa saatavilla</div>
        }
        else
        {
            <div style="text-align:center"> <img src="/tripPictures/@location.kuva" width="150" /></div>
        }
        

        @if(stories.Count != 0){
            @foreach (var s in stories)
            {
                    <div style="float: left; width: 33.33%; padding: 15px;">
                        <h2 style="text-align:left">Matka nro @s.idmatka.ToString()</h2>
                        <div>@trip.alkupvm.ToString().Replace("0.00.00", "") - @trip.loppupvm.ToString().Replace("0.00.00", "")</div>
                        <p style="text-align:left">Tarinan nro: @s.idtarina.ToString()</p>
                        <p>Tarinan kirjoitus pvm: @s.pvm.ToString().Replace("0.00.00", "")</p>
                        <p>@s.teksti</p>
                    </div>
            }
        }
        else{
            <br />
            <div style="text-align:center"><h3>Ei tarinoita saatavilla</h3></div>
        }
    }
}
else{
    <h2>  <img src="/images/loading.gif" width="150" /></h2>
    <h2>Kirjaudu sisään nähdäksesi matkakohteen matkat ja tarinat</h2>
}

@code {
    SharedLib.matkakohdeDTO? location;
    SharedLib.matkaDTO? trip;
    List<SharedLib.matkaDTO>? trips = new List<SharedLib.matkaDTO>();
    List<SharedLib.tarinaDTO>? allstories = new List<SharedLib.tarinaDTO>();
    List<SharedLib.tarinaDTO>? stories = new List<SharedLib.tarinaDTO>();

    [Parameter]
    public long? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            location = await Http.GetFromJsonAsync<SharedLib.matkakohdeDTO>($"api/Matkakohdes/{Id}");
            trips = await Http.GetFromJsonAsync<List<SharedLib.matkaDTO>>("/api/Matkas");
            allstories = await Http.GetFromJsonAsync<List<SharedLib.tarinaDTO>>("/api/Tarinas");
            foreach(var s in allstories){

                trip = trips.FirstOrDefault(m => m.idmatka == s.idmatka);
                @if (trip.yksityinen == 1 && s.idmatkakohde == location.idmatkakohde)
                { //jos matka on julkinen ja jos se liittyy ko. matkakohteeseen, niin pääsee näytettävälle listalle
                    stories.Add(s);
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}
